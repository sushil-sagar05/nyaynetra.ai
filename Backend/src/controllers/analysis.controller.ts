// get document from frontend
// send document to flask microservice
// get back analyzed document

import AnalysisModel from "../models/analysis.model";
import { NextFunction,Response,Request } from "express";
import { ApiError } from "../utils/ApiError";
import { ApiResponse } from "../utils/ApiResponse";
import { User } from "../models/user.model";
import DocumentModel from "../models/document.model";
import axios from "axios";

interface authRequest extends Request{
    user?:User
}

const analysis = async(req:authRequest,res:Response)=>{
    try {
        const user= req.user
        if(!user){
             throw new ApiError(400,"No user present")
        }
        const documentId = req.params.documentId
        if(!documentId){
            throw new ApiError(400,"No document to analyze")
        }
        const existingAnalysis = await AnalysisModel.findOne({
        documentId: documentId,
        userId: user._id  
        });
        if(existingAnalysis){
         res.status(200).json(new ApiResponse(201,existingAnalysis,"Analysis of document generated by existing"));
         return;
        }
        const retrievedDocument = await DocumentModel.findOne({_id:documentId})
        if (!retrievedDocument) {
            throw new ApiError(404, "Document not found");
        }
        const documentUrl=retrievedDocument?.ClouinaryUrl
        const flaskUrl= `${process.env.Flask_Url}/analysis`
        const response = await axios.post(flaskUrl,{documentUrl});
         const { summary, risky_terms, key_clauses } = response.data;
        if (!summary || !risky_terms|| !key_clauses ) {
            throw new ApiError(400, "Incomplete analysis received from Flask ");
        }
         const newAnalysis = new AnalysisModel({
            userId:user._id,
            documentId,
            summary,
            risky_terms,
            key_clauses
         })
         const savedAnalysisResult = await newAnalysis.save()
         res.status(200).json(new ApiResponse(201,savedAnalysisResult,"Analysis of document generated"))

    } catch (error) {
        console.error("Analysis error:", error);
        res.status(500).json(new ApiError(500, "Error analyzing document"));
    }
}

const getAnalysisById = async(req:authRequest,res:Response)=>{
   try {
     const user = req.user
     if(!user){
         throw new ApiError(400,"No user present") 
     }
     const document = req.params.documentId
     const analyzedDocument = await AnalysisModel.findOne({userId:user._id,documentId:document})
     res.status(200).json(new ApiResponse(201,analyzedDocument,"Analysis of document generated"))
   } catch (error) {
        console.error("Analysis error:", error);
        res.status(500).json(new ApiError(500, "Error getting document"));
   }
}

const analysisController={
    analysis,
    getAnalysisById
}
export default analysisController
